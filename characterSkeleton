//***********************************************************standardAnimation
//****************************************************************headAndNeck
let animation = shape( () => {
  displace(0.0, -0.33, -0.20);
let headAndNeckVertical = shape( () => {
  color(standard);
  let head = shape( () => {
});
let neck = shape( () => {
  rotateX(PI/-.55);
  displace(0.0, 0.1*size, -0.06*size);
  blend(0.002*size);
  blend(0.002*size);
  displace(0.0, 0.1*size, -0.06*size);
  displace(0.0*size, -0.55*size, 0.33*size);
  torus(.049*size, 0.180*size);
});
//head();
//neck();
});
let headAndNeckHorizontal = shape(() => {
  displace(-0.0*size, 0.02*size, 0.45*size);
  rotateY(PI/.5);
  rotateX(PI/7.38);
  headAndNeckVertical();
});
headAndNeckVertical();
headAndNeckHorizontal();
//**************************************************************facialFeatures
let facialFeaturesVertical = shape( () => {
let facialFeatures = shape( () => {
});
 //combine facial features to animate simultaneously
//mouth();
});
let facialFeaturesHorizontal = shape( () => {
  displace(0.0*size, 0.02*size, 0.45*size);
  facialFeaturesVertical();
});
//********************************************************************clothing
let clothing = shape( () => {
let clothingVertical = shape( () => {
});
  let horizontalClothing = shape( () => {
  displace(0.0*size, 0.0*size, 0.2*size);
   verticalClothing()
});
//************************************************************************body
let torsoVertical = shape(() => {
  color(colorChange);
  displace(0.0,-0.09*size, 0.2*size);
  box(0.05*size,0.1*size,0.01*size);
  expand(0.349*size);
});
let torsoHorizontal = shape(() => {
  displace(-0.2*size, -0.109*size, 0.4*size);
  rotateZ(PI/2);
  rotateX(PI/2);
  verticalTorso();
  expand(0.02*size);
});
let limbs = shape( () => {
  let verticalLimbs = shape( () => {
  let arms = shape( () => {
  color(standrd);
  rotateZ(PI/1);
  displace(-0.253*size, 0.52*size,0.25*size);
  rotateZ(PI/2);
  blend(0.1352*size);
  torus(0.06*size, 0.09*size);
  displace(-0.0441*size,-0.0,0.15*size);
  box(size*0.011-sd.w*0.01*size, size*0.081-sd.w*0.01*size, size*0.08-sd.w*0.1*size);
  blend(0.252*size);
  displace(0.0241*size,0.0,0.1035*size);
  sphere(size*0.0311-sd.w*0.01*size);
  });
let legs = shape( () => {
  displace(0.0, 0.2*size, 0.0);
  displace(0.0, 0.43*size, 0.0);
  arms();
  });
  displace(0.050*sin(time*2)*size,0.0,0.0);
  mirrorX();
  arms();
  legs();
});
let horizontalLimbs = shape( () => {
  displace(-0.2*size, -0.18*size, 0.3*size);
  rotateZ(PI/2);
  rotateY(PI/2);
  verticalLimbs();
});
let verticalAvi = shape( () => {
  verticalHeadAndNeck();
  verticalClothing();
  verticalTorso();
  verticalLimbs();
});
let horizontalAvi = shape( () => {
  verticalHeadAndNeck();
  verticalClothing();
  verticalTorso();
  mirrorX();
  verticalLimbs();
  verticalFacialFeatures();
});
let avi = shape( () => {
verticalAvi();
//horizontalAvi();
});
avi();
});
animation();
